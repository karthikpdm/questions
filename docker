Any 3 best practices of docker?

a) Use Official Base Images:   Start your Dockerfile with an official base image from the Docker Hub repository. Official images are
typically well-maintained and regularly updated.

b) Use Specific Version Tags:  Specify a specific version tag for the base image to ensure consistency and avoid unexpected changes. 
Avoid using the "latest" tag, as it may not be the most stable or suitable version for your application.

c) Minimize Layers:  Use multi-stage builds and combine commands to minimize the number of layers in your image. Each layer adds overhead 
and increases the size of the image.

d) Use .dockerignore:  Create a .dockerignore file to exclude unnecessary files and directories from being copied into the image. 
This helps reduce the build context and improves build speed.

e) Order Commands Efficiently:  Arrange commands in your Dockerfile to take advantage of caching. Place commands that change less 
frequently, such as installing dependencies, at the top of the file, and commands that change frequently, such as copying source code, 
at the bottom.

f) Use COPY Instead of ADD:   Prefer the COPY instruction over ADD unless you specifically need the additional features of ADD, such as 
extracting compressed files or downloading files from URLs. COPY is simpler and more transparent.

g) Minimize Image Size:  Remove unnecessary dependencies, temporary files, and cleanup after each step to minimize the final image size. 
Use the --no-install-recommends flag when installing packages to exclude unnecessary dependencies.

h) Use Environment Variables:  Set necessary environment variables in the Dockerfile or at runtime using the -e option when running the 
container. This allows for easy configuration and makes the image more portable.

i) Define Entry Point:  Use the ENTRYPOINT instruction to specify the default command to run when the container starts. Combine it with 
CMD for flexibility, allowing users to override the default command if needed.

j) Keep Security in Mind:  Regularly update your base images to incorporate security patches. Avoid running containers as the root user 
whenever possible, and properly configure user permissions within the container.

k) Document Your Dockerfile:  Add comments and provide clear instructions within the Dockerfile to make it more understandable and
maintainable. Document any assumptions, dependencies, and customizations.

l) Test Your Image:  Regularly build and test your Docker image to ensure it behaves as expected and meets the requirements of your 
application. Use automated testing tools and CI/CD pipelines to streamline the process.

By following these best practices, you can create efficient, maintainable, and secure Docker images for your application

Difference between docker stop and docker kill?
The main difference between docker stop and docker kill commands lies in how they handle the termination of a running container:

docker stop: This command sends a SIGTERM signal to the main process running inside the container, allowing it to gracefully stop and
clean up. The container is given a grace period (default is 10 seconds) to shut down gracefully. During this time, the container can 
perform any necessary cleanup tasks, such as saving state or closing connections. If the container does not stop within the grace 
period, a SIGKILL signal is sent, forcibly terminating the container.

docker kill: This command sends a SIGKILL signal to the main process running inside the container, immediately terminating it 
without any grace period. The container is abruptly stopped, and any running processes inside the container are terminated 
immediately, without any chance to perform cleanup tasks.

In summary, docker stop allows the container to gracefully shut down by sending a termination signal and waiting for the container
to stop, while docker kill forcefully terminates the container without giving it a chance to perform any cleanup tasks. The choice 
between the two commands depends on the desired behavior for stopping the container, considering factors such as application state and 
the need for graceful termination.


Command to list conatiners which state is exited? 
Ans : docker ps -a f status=running = exited

command to clean-up docker host ( deleting stopped conatiners, dangling images and unused networks)? 
Ans : docker system prune


What version of docker you have used? Specific reason to use that particular version? 
Ans:

Can we have multiple CMD in Dockerfile?
yes but it considers the last cmd only

Have you worked on docker swarm and docker compose?

About alpine why it used and how to use it?

Have you worked on multi-stage dockerfile and why we need that?

Lets say i have container which is attached with a volume, if container crashes what happens to volume?

can you copy a file form local to run container?

Lets say I have 1 GB file that has to be sent to docker daemon, as its 1GB it will take muchtime and network too. By which option while building dockerfile we can send the fileIn better manner?
What is the difference between ADD and COPY docker instructions in Dockerfile?
Command to remove to stopped and running Containers? docker rm $(ps-aq)
Inside the container I did many changes like Creating, modifying and deleting file but I Wanted to check which files has been changed And what action has been taken what is the Command we need to use ?

What does ONBUILD instruction do in Dockerfile?

What is the use of .dockerignore file?
I have dockerfile that accepts arguments, if I supply value as “1” then it should use maven 2.x version for base image and if I 
supply “2” then it should take maven latest as base image

What are docker compose and docker swarm?

How to configure docker private registry?

Types of network in docker? if you dont specify network to deploy on which network the conatiner will be created?
Explain a sample dockerfile that you have used in your project?
Can we launch linux conatiners windows and viceversa?
Why we need docker compose and docker swarm
What's the difference between docker volume and docker mounting
What is the importance of .dockerigonre file, can name docker file with any other name?
I need to delete all stopped containers and unused images command for that?
How do you monitor docker in production
Is it good to use docker compose in production
How to copy files from host machine to container?
docker cp filepath <container id>
By default how many containeres are created ?
A) only one container
==> Which is the lightest image in docker ?
 A) Alpine
==> How do you list allstopped containers only ?
A) docker ps -f "status=exited"
1.what was yourrepository were you have pushed your dockerhub images ?
A) mention dockerhub and Amazon Elastic Container Registry (ECR)
